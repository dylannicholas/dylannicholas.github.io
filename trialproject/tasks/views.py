from django.http import HttpResponseRedirect
from django.urls import reverse

from django.shortcuts import render

# Alternative way of generating forms - Generated by Django, takes care of all the client-side validation
from django import forms


# Create class to import new form:
# called NewTaskForm, inherits from forms.Form - within, all of the inputs you would like to get from the user
class NewTaskForm(forms.Form):

# Give class access to 'task' variable
    task = forms.CharField(label = "New Task")
# Could include "priority = forms.IntegerField(label="Priority", min_value=1, max_value=10)"

def add(request):
    if request.method == "POST":
        # request.POST contains all the data the user submitted in the form, save in 'form' variable
        form = NewTaskForm(request.POST)
        if form.is_valid():
            task = form.cleaned_data["task"]
            request.session["tasks"] += [task]
            # "figure out what the url of the index url for the tasks app is, and use that url", try not to hard code the URL!, remember to import Redirect and Reverse
            return HttpResponseRedirect(reverse("tasks:index"))
        else:
            return render(request, "task/add.html", {
                # Send back the existing form data that they had keyed in
                "form": form
            })
    return render(request, "tasks/add.html", {
        # Give template access to a variable called 'form', which will just be NewTaskForm()
        "form": NewTaskForm()
    })

# See add.url to plug in {{ form }}




def index(request):
    # store in user session rather than creating a global 'tasks = []' variable, Django stores data in Tables --> remember to CREATE by running "python3 manage.py migrate" in terminal
    if "tasks" not in request.session:
        request.session["tasks"] = []

    return render(request, "tasks/index.html", {
        "tasks": request.session["tasks"]
    })
# Name of variable that HTML template has access to (left), that contains value on the right
